wallet-recover:
    Usage: wallet-recover <file> [<new wallet>]


brute:
  This program scans the given file, looking at every byte as though it's the
  first byte of the private key.  It uses that key to derive the public key and
  address, and if the derived public key matches the supplied public key, it
  prints all 3.

  Usage: brute <file> {<pubkey>}
     where: <file>     is the path to any file
            <pubkey>   is the public key that we're looking for; there is a 
	               meaningless (giberish) default value for testing.
		       
  This program is surprisingly slow, due to the significant cpu-intensive work
  to repeatedly derive keys and addresses.
  

brute2:
  This program scans the given file, looking for breadcrumbs that indicate the
  start of a private or public key sequence.  For private key cases, it pulls
  that key, then derives the public key and address.  For public key cases, it
  derives the address.  If no pubkey is supplied on the command line, all cases
  will be printed out.  If a pubkey is supplied on the command line, only cases
  where a match can be established will produce output.

  Usage: brute2 <file> {<pubkey>}
  
  This program is much faster than brute, since relatively few cases will be
  considered.

  Cases:
     0x01 0x01 0x04 0x20        Marker for private keys
     0x6b 0x65 0x79 0x41 0x04   Marker for pub keys
     0x03 0x42 0x00 0x04        Marker for pub keys


